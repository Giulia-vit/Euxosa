"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.baseLogger = exports.newline = void 0;
var _tslog = require("tslog");
var _configShared = require("../config-shared");
const newline = ()=>{
    var ref;
    var __blitz_logLevel;
    globalThis._blitz_logLevel = (__blitz_logLevel = globalThis._blitz_logLevel) !== null && __blitz_logLevel !== void 0 ? __blitz_logLevel : (ref = (0, _configShared).loadConfigAtRuntime().log) === null || ref === void 0 ? void 0 : ref.level;
    const logLevel = globalThis._blitz_logLevel;
    switch(logLevel){
        case 'trace':
        case 'debug':
        case 'info':
            console.log(' ');
            break;
        case 'warn':
        case 'error':
        case 'fatal':
        default:
            break;
    }
};
exports.newline = newline;
const baseLogger = (options)=>{
    var ref, ref1;
    if (globalThis._blitz_baseLogger) return globalThis._blitz_baseLogger;
    let config;
    try {
        config = (0, _configShared).loadConfigAtRuntime();
    } catch  {
        config = {
        };
    }
    globalThis._blitz_baseLogger = new _tslog.Logger({
        minLevel: ((ref = config.log) === null || ref === void 0 ? void 0 : ref.level) || 'info',
        type: ((ref1 = config.log) === null || ref1 === void 0 ? void 0 : ref1.type) || 'pretty',
        dateTimePattern: process.env.NODE_ENV === 'production' ? 'year-month-day hour:minute:second.millisecond' : 'hour:minute:second.millisecond',
        displayFunctionName: false,
        displayFilePath: 'hidden',
        displayRequestId: false,
        dateTimeTimezone: process.env.NODE_ENV === 'production' ? 'utc' : Intl.DateTimeFormat().resolvedOptions().timeZone,
        prettyInspectHighlightStyles: {
            name: 'yellow',
            number: 'blue',
            bigint: 'blue',
            boolean: 'blue'
        },
        maskValuesOfKeys: [
            'password',
            'passwordConfirmation'
        ],
        exposeErrorCodeFrame: process.env.NODE_ENV !== 'production',
        ...options
    });
    return globalThis._blitz_baseLogger;
};
exports.baseLogger = baseLogger;

//# sourceMappingURL=logging.js.map